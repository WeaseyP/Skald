Revised Phase 13: Beat Sequencer MVP (Frontend + Backend)

Epic: SKALD-E13: Sequencer MVP

    User Story: As a musician, I want to load a custom Skald Instrument, program a simple one-bar drum loop for it, and generate the corresponding Odin code to verify the end-to-end workflow.

MVP Definition

The Minimum Viable Product for the Skald Beat Sequencer is defined as a system that allows a user to perform the following actions:

    Open a new, simplified Sequencer UI panel.

    Add a track to the sequencer.

    Assign a user-created Skald Instrument (from a saved .json file) to that track.

    Program a 16-step (one bar) pattern of notes for the assigned instrument. For the MVP, these notes will have a fixed velocity and duration.

    Set a global BPM for the loop.

    Click the "Generate Code" button, which will pass a JSON object containing the track, its assigned instrument, and its pattern data to the backend.

    The backend will then generate the final Odin code, including the Note_Event array correctly associated with the selected instrument.

Tasks for Phase 13

    SKALD-92: [Frontend] Implement a basic, non-collapsible SequencerPanel.tsx component.

        This fulfills the core layout requirement of SKALD-76.

    SKALD-93: [Frontend] Implement a basic BPM control.

        This covers the most critical part of SKALD-77.

    SKALD-94: [Frontend] Implement a basic TrackList.tsx component.

        This new component will allow a user to add a track and will display an "Assign Instrument" button. This is a simplified version of the track management from SKALD-78 and SKALD-79.

    SKALD-95: [Frontend] Implement a basic instrument loader.

        Clicking "Assign Instrument" will use the existing file I/O hooks to open a file dialog, allowing the user to select a saved Instrument .json file. This is the MVP implementation of the "Sound Library" concept from SKALD-78.

    SKALD-96: [Frontend] Implement a 16-step PatternGrid.tsx component.

        This component will allow the user to toggle steps on or off for the selected track.

    SKALD-97: [Backend] Update the JSON contract and parsing logic.

        The backend will be updated to parse a sequencer object containing a bpm and a tracks array. Each track object will contain its instrumentNodeId and a simple pattern array. This is an enhancement of the original SKALD-96.

    SKALD-98: [Backend] Implement instrument-aware Note_Event generation.

        The backend's code generator will iterate through the tracks, use the instrumentNodeId to identify the target instrument, and generate Note_Events for that instrument's pattern. This fulfills the core of SKALD-88.

Revised Phase 14: Advanced Sequencer Features (Frontend)

Epic: SKALD-E14: Advanced Sequencer Features (UI)

    User Story: As a musician, I want advanced UI controls to create complex, expressive, and multi-track arrangements with detailed note editing and automation.

Tasks for Phase 14

    SKALD-99: [Frontend] Implement full multi-track management.

        Enhance TrackList.tsx with mute, solo, pan, and volume controls.

    SKALD-100: [Frontend] Implement advanced pattern and note editing.

        Implement the "drum" vs. "melodic" trackType selector.

        Develop the Piano Roll UI for melodic tracks.

        Implement sub-rows for editing note velocity and duration (gate).

    SKALD-101: [Frontend] Implement arrangement and pattern management.

        Build the UI for creating, renaming, and selecting multiple patterns per track.

        Implement the "Arrangement View" for chaining patterns into a song loop.

    SKALD-102: [Frontend] Implement advanced feature controls.

        Add the global "Swing" slider to the transport controls.

        Create the UI for adding Parameter Locks and Conditional Triggers to individual steps.

Revised Phase 15: Advanced Sequencer Features (Backend)

Epic: SKALD-E15: Advanced Sequencer Features (Backend)

    User Story: As a developer, I want the Odin backend to correctly interpret and generate code for all advanced sequencing, automation, and arrangement features from the UI.

Tasks for Phase 15

    SKALD-103: [Backend] Implement full JSON contract parsing.

        Update the Odin backend to parse the complete sequencer object, including all advanced data structures like the arrangement sequence, detailed note properties (velocity, duration), and parameter locks.

    SKALD-104: [Backend] Implement swing and advanced timing logic.

        Implement the swing algorithm to systematically delay the start_time of off-beat Note_Events based on the global swing value from the JSON.

    SKALD-105: [Backend] Implement parameter lock and conditional trigger logic.

        During event generation, evaluate conditional triggers for each step to determine if a note should be created.

        Generate the necessary code to modulate instrument parameters for steps that have Parameter Locks.