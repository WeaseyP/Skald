Project snapshot for: skald-ui
Generated with 7 files.

--- START FILE: forge.config.ts ---

import type { ForgeConfig } from '@electron-forge/shared-types';
import { MakerSquirrel } from '@electron-forge/maker-squirrel';
import { MakerZIP } from '@electron-forge/maker-zip';
import { MakerDeb } from '@electron-forge/maker-deb';
import { MakerRpm } from '@electron-forge/maker-rpm';
import { VitePlugin } from '@electron-forge/plugin-vite';
import { FusesPlugin } from '@electron-forge/plugin-fuses';
import { FuseV1Options, FuseVersion } from '@electron/fuses';

const config: ForgeConfig = {
  packagerConfig: {
    asar: true,
  },
  rebuildConfig: {},
  makers: [new MakerSquirrel({}), new MakerZIP({}, ['darwin']), new MakerRpm({}), new MakerDeb({})],
  plugins: [
    new VitePlugin({
      // `build` can specify multiple entry builds, which can be Main process, Preload scripts, Worker process, etc.
      // If you are familiar with Vite configuration, it will look really familiar.
      build: [
        {
          // `entry` is just an alias for `build.lib.entry` in the corresponding file of `config`.
          entry: 'src/main.ts',
          config: 'vite.main.config.ts',
          target: 'main',
        },
        {
          entry: 'src/preload.ts',
          config: 'vite.preload.config.ts',
          target: 'preload',
        },
      ],
      renderer: [
        {
          name: 'main_window',
          config: 'vite.renderer.config.ts',
        },
      ],
    }),
    // Fuses are used to enable/disable various Electron functionality
    // at package time, before code signing the application
    new FusesPlugin({
      version: FuseVersion.V1,
      [FuseV1Options.RunAsNode]: false,
      [FuseV1Options.EnableCookieEncryption]: true,
      [FuseV1Options.EnableNodeOptionsEnvironmentVariable]: false,
      [FuseV1Options.EnableNodeCliInspectArguments]: false,
      [FuseV1Options.EnableEmbeddedAsarIntegrityValidation]: true,
      [FuseV1Options.OnlyLoadAppFromAsar]: true,
    }),
  ],
};

export default config;


--- END FILE: forge.config.ts ---

--- START FILE: forge.env.d.ts ---

/// <reference types="@electron-forge/plugin-vite/forge-vite-env" />

export interface IElectronAPI {
    invokeCodegen: (graphJson: string) => Promise<string>,
    // NEW: Add save/load to the interface
    saveGraph: (graphJson: string) => Promise<void>,
    loadGraph: () => Promise<string | null>,
}

declare global {
    interface Window {
        electron: IElectronAPI
    }
}

--- END FILE: forge.env.d.ts ---

--- START FILE: index.html ---

      
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-T" />
    <title>Skald</title>
    <!-- ADD THIS LINE: -->
    <link rel="stylesheet" href="../node_modules/reactflow/dist/style.css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/renderer.tsx"></script>
  </body>
</html>

    

--- END FILE: index.html ---

--- START FILE: tsconfig.json ---

{
  "compilerOptions": {
    "target": "ESNext",
    "module": "commonjs",
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "noImplicitAny": true,
    "sourceMap": true,
    "baseUrl": ".",
    "outDir": "dist",
    "moduleResolution": "node",
    "resolveJsonModule": true
  }
}


--- END FILE: tsconfig.json ---

--- START FILE: vite.main.config.ts ---

import { defineConfig } from 'vite';

// https://vitejs.dev/config
export default defineConfig({});


--- END FILE: vite.main.config.ts ---

--- START FILE: vite.preload.config.ts ---

import { defineConfig } from 'vite';

// https://vitejs.dev/config
export default defineConfig({});


--- END FILE: vite.preload.config.ts ---

--- START FILE: vite.renderer.config.ts ---

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react'; // Import the plugin

// https://vitejs.dev/config
export default defineConfig({
  plugins: [react()], // Add the plugin to the plugins array
});

--- END FILE: vite.renderer.config.ts ---

