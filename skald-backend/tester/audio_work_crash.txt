package generated_audio

import "core:math"

// --- Local PRNG Implementation (xorshift32) ---
PRNG_State :: struct {
	state: u32,
}

// Generates the next u32 and updates the state.
next_u32 :: proc(rng: ^PRNG_State) -> u32 {
	x := rng.state;
	x = x ~ (x << 13);
	x = x ~ (x >> 17);
	x = x ~ (x << 5);
	rng.state = x;
	return x;
}

// Generates the next f32 in the range [-1.0, 1.0)
next_float32 :: proc(rng: ^PRNG_State) -> f32 {
	i := next_u32(rng) >> 8;
	return (f32(i) / f32(1<<24)) * 2.0 - 1.0;
}


// --- Voice State ---
Voice_State :: struct {
	noise_rng:               PRNG_State,
	adsr_1_stage:            ADSR_Stage,
	adsr_1_level_at_release: f32,
}

ADSR_Stage :: enum { Idle, Attack, Decay, Sustain, Release }

// Voice struct no longer holds instrument-wide parameters
Voice :: struct {
	is_active: bool,
	note: u8,
	target_freq: f32,
	current_freq: f32, // For glide
	attack: f32,
	decay: f32,
	sustain: f32,
	release: f32,
	time_active: f32,
	time_released: f32,
	state: Voice_State,
}

// AudioProcessor now holds the shared, runtime-changeable parameters
AudioProcessor :: struct {
	voices:           [8]Voice,
	next_voice_index: int,

	attack:           f32,
	decay:            f32,
	sustain:          f32,
	release:          f32,
}

init_processor :: proc(p: ^AudioProcessor) {
	// Initialize default instrument parameters on the processor
	p.attack = 0.1;
	p.decay = 0.63;
	p.sustain = 0.0;
	p.release = 1.0;

	// Initialize individual voice states
	for i in 0..<8 {
		v := &p.voices[i];
		v.state.noise_rng.state = u32(i*31 + 17) | 1;
	}
}

// Processes a single voice, taking the processor as an argument to access shared parameters
process_voice :: proc(p: ^AudioProcessor, voice: ^Voice, sample_rate: f32) -> f32 {
	node_2_out: f32;
	node_1_out: f32;

	glide_coeff := 1.0 - math.exp(-1.0 / (sample_rate * (0.050) + 0.0001));
	voice.current_freq += (voice.target_freq - voice.current_freq) * glide_coeff;

	// --- Noise Node 2 ---
	node_2_out = next_float32(&voice.state.noise_rng) * 1.0;

	// --- ADSR Node 1 ---
	{
		envelope: f32 = 0.0;
		switch voice.state.adsr_1_stage {
		case .Idle:
			envelope = 0.0;
		case .Attack:
			if p.attack > 0 do envelope = voice.time_active / p.attack; else do envelope = 1.0;
			if voice.time_active >= p.attack {
				voice.state.adsr_1_stage = .Decay;
			}
		case .Decay:
			time_in_decay := voice.time_active - p.attack;
			if p.decay > 0 do envelope = 1.0 - (time_in_decay / p.decay) * (1.0 - p.sustain); else do envelope = p.sustain;
			if time_in_decay >= p.decay {
				voice.state.adsr_1_stage = .Sustain;
			}
		case .Sustain:
			envelope = p.sustain;
		case .Release:
			time_in_release := voice.time_active - voice.time_released;
			if p.release > 0 do envelope = voice.state.adsr_1_level_at_release * (1.0 - (time_in_release / p.release)); else do envelope = 0.0;
			if envelope <= 0 {
				voice.is_active = false;
			}
		}
		// Correctly apply envelope to the output outside the switch
		node_1_out = node_2_out * envelope * 1.0;
	}
	return node_1_out;
}

// --- Main Processing Function ---
process_sample :: proc(p: ^AudioProcessor, sample_rate: f32, time: u64) -> (left: f32, right: f32) {
	output_left: f32 = 0.0;
	output_right: f32 = 0.0;
	for i in 0..<8 {
		voice := &p.voices[i];
		if voice.is_active {
			// Update the call to pass the processor 'p'
			mono_out := process_voice(p, voice, sample_rate);
			output_left += mono_out;
			output_right += mono_out;
			voice.time_active += 1.0 / sample_rate;
		}
	}
	return output_left, output_right;
}